"use strict";

function t() {
    return {}.toString.call({
        [Symbol.toStringTag]: "EventEmitterTarget"
    });
}

function e(t) {
    if ("string" != typeof t && "symbol" != typeof t) throw new TypeError(" EVENTNAME expected: string | symbol;but invalid :" + t);
}

function n(t) {
    if ("function" != typeof t) throw new TypeError(" EVENTLISTENER expected: (event?: any) => void;but invalid:" + t);
}

function o() {
    const o = new Map, r = new WeakMap;
    function i(t) {
        let e = o.get(t);
        return e || (e = new Set, o.set(t, e)), e;
    }
    function s(t) {
        e(t), o.has(t) && i(t).clear();
    }
    function c(t, n) {
        e(t), o.has(t) && i(t).forEach((t => {
            Promise.resolve().then((() => {
                t(n);
            }));
        }));
    }
    function u(t, o) {
        e(t), n(o), i(t).add(o);
    }
    function f(t, e) {
        i(t).delete(e);
    }
    function a(t, o) {
        e(t), n(o), f(t, o), function(t, e) {
            const n = i(t);
            let o = r.get(e);
            o && n.delete(o);
        }(t, o);
    }
    function l() {
        return [ ...o ].map((([t, e]) => [ t, [ ...e ] ]))[Symbol.iterator]();
    }
    return {
        [Symbol.toPrimitive]: t,
        [Symbol.toStringTag]: "EventEmitterTarget",
        [Symbol.iterator]: l,
        entries: l,
        listenerCount: function(t) {
            return e(t), o.has(t) ? i(t).size : 0;
        },
        clear: s,
        removeAllListeners: s,
        on: u,
        addListener: u,
        off: a,
        removeListener: a,
        once: function(t, o) {
            e(t), n(o);
            let i = !1, s = r.get(o);
            if (!s) {
                const e = n => {
                    f(t, e), f(t, o), i || (i = !0, o(n));
                };
                s = e, r.set(o, s);
            }
            f(t, o), u(t, s);
        },
        emit: c,
        dispatch: c,
        eventNames: function() {
            return [ ...o.keys() ];
        },
        listeners: function(t) {
            return e(t), o.has(t) ? [ ...i(t) ] : [];
        }
    };
}

const r = (t => {
    var e = Symbol(), n = new Function("return async()=>{}")()();
    function r() {
        const t = o();
        return this && this instanceof r ? (Object.assign(this, t), this) : Reflect.construct(r, []);
    }
    return Reflect.set(r, e, n), r;
})();

module.exports = r;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
