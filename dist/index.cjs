"use strict";

function t(n) {
    return (t = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
        return typeof t;
    } : function(t) {
        return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
    })(n);
}

function n(r) {
    return (n = "function" == typeof Symbol && "symbol" == t(Symbol.iterator) ? function(n) {
        return t(n);
    } : function(n) {
        return n && "function" == typeof Symbol && n.constructor === Symbol && n !== Symbol.prototype ? "symbol" : t(n);
    })(r);
}

function r(t, n, r) {
    return n in t ? Object.defineProperty(t, n, {
        value: r,
        enumerable: !0,
        configurable: !0,
        writable: !0
    }) : t[n] = r, t;
}

function e(t, n) {
    return function(t) {
        if (Array.isArray(t)) return t;
    }(t) || function(t, n) {
        var r = null == t ? null : "undefined" != typeof Symbol && t[Symbol.iterator] || t["@@iterator"];
        if (null != r) {
            var e, o, i = [], u = !0, a = !1;
            try {
                for (r = r.call(t); !(u = (e = r.next()).done) && (i.push(e.value), !n || i.length !== n); u = !0) ;
            } catch (t) {
                a = !0, o = t;
            } finally {
                try {
                    u || null == r.return || r.return();
                } finally {
                    if (a) throw o;
                }
            }
            return i;
        }
    }(t, n) || i(t, n) || function() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }();
}

function o(t) {
    return function(t) {
        if (Array.isArray(t)) return u(t);
    }(t) || function(t) {
        if ("undefined" != typeof Symbol && null != t[Symbol.iterator] || null != t["@@iterator"]) return Array.from(t);
    }(t) || i(t) || function() {
        throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }();
}

function i(t, n) {
    if (t) {
        if ("string" == typeof t) return u(t, n);
        var r = Object.prototype.toString.call(t).slice(8, -1);
        return "Object" === r && t.constructor && (r = t.constructor.name), "Map" === r || "Set" === r ? Array.from(t) : "Arguments" === r || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? u(t, n) : void 0;
    }
}

function u(t, n) {
    (null == n || n > t.length) && (n = t.length);
    for (var r = 0, e = new Array(n); r < n; r++) e[r] = t[r];
    return e;
}

function a() {
    return {}.toString.call(r({}, Symbol.toStringTag, "EventEmitterTarget"));
}

function c(t) {
    if ("string" != typeof t && "symbol" !== n(t)) throw new TypeError(" EVENTNAME expected: string | symbol;but invalid :" + t);
}

function l(t) {
    if ("function" != typeof t) throw new TypeError(" EVENTLISTENER expected: (event?: any) => void;but invalid:" + t);
}

function f() {
    var t, n = new Map, i = new WeakMap;
    function u(t) {
        var r = n.get(t);
        return r || (r = new Set, n.set(t, r)), r;
    }
    function f(t) {
        c(t), n.has(t) && u(t).clear();
    }
    function y(t, r) {
        c(t), n.has(t) && u(t).forEach((function(t) {
            Promise.resolve().then((function() {
                t(r);
            }));
        }));
    }
    function s(t, n) {
        c(t), l(n), u(t).add(n);
    }
    function m(t, n) {
        u(t).delete(n);
    }
    function b(t, n) {
        c(t), l(n), m(t, n), function(t, n) {
            var r = u(t), e = i.get(n);
            e && r.delete(e);
        }(t, n);
    }
    function p() {
        return o(n).map((function(t) {
            var n = e(t, 2);
            return [ n[0], o(n[1]) ];
        }))[Symbol.iterator]();
    }
    return r(t = {}, Symbol.toPrimitive, a), r(t, Symbol.toStringTag, "EventEmitterTarget"), 
    r(t, Symbol.iterator, p), r(t, "entries", p), r(t, "listenerCount", (function(t) {
        return c(t), n.has(t) ? u(t).size : 0;
    })), r(t, "clear", f), r(t, "removeAllListeners", f), r(t, "on", s), r(t, "addListener", s), 
    r(t, "off", b), r(t, "removeListener", b), r(t, "once", (function(t, n) {
        c(t), l(n);
        var r = !1, e = i.get(n);
        e || (e = function e(o) {
            m(t, e), m(t, n), r || (r = !0, n(o));
        }, i.set(n, e)), m(t, n), s(t, e);
    })), r(t, "emit", y), r(t, "dispatch", y), r(t, "eventNames", (function() {
        return o(n.keys());
    })), r(t, "listeners", (function(t) {
        return c(t), n.has(t) ? o(u(t)) : [];
    })), t;
}

var y = function(t) {
    var n = Symbol();
    try {
        var r = new Function("return async()=>{}")()();
    } catch (t) {}
    function e() {
        var t = f();
        return this && this instanceof e ? (Object.assign(this, t), this) : Reflect.construct(e, []);
    }
    return Reflect.set(e, n, r), e;
}();

module.exports = y;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
