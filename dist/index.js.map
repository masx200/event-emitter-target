{"version":3,"file":"index.js","sources":["../src/createeventtarget.ts"],"sourcesContent":["type EventEmitterTarget=ReturnType<typeof createeventtarget>\nexport default function createorclass(\n  this: EventEmitterTarget|undefined\n): EventEmitterTarget {\n  const eventemittertarget = createeventtarget();\n  if (this&&this instanceof createorclass) {\n    Object.assign(this, eventemittertarget);\n    return this;\n  } else {\n    return eventemittertarget;\n  }\n}\ntype EVENTNAME = string | symbol;\ntype EVENTLISTENER = (event?: any) => void;\n\nfunction createeventtarget() {\n  const 监听器回调映射 = new Map<EVENTNAME, Set<EVENTLISTENER>>();\n  const 源回调到一次包装 = new WeakMap<EVENTLISTENER, EVENTLISTENER>();\n  function 获取监听器集合(name: EVENTNAME): Set<EVENTLISTENER> {\n    let 监听器集合: Set<EVENTLISTENER> | undefined = 监听器回调映射.get(name);\n    if (!监听器集合) {\n      监听器集合 = new Set();\n      监听器回调映射.set(name, 监听器集合);\n    }\n    return 监听器集合;\n  }\n\n  function clear(name: EVENTNAME) {\n    assertEVENTNAME(name);\n    if (监听器回调映射.has(name)) {\n      const 监听器集合 = 获取监听器集合(name);\n      监听器集合.clear();\n    }\n  }\n  function emit(name: EVENTNAME, event?: any) {\n    assertEVENTNAME(name);\n    if (监听器回调映射.has(name)) {\n      const 监听器集合 = 获取监听器集合(name);\n      监听器集合.forEach(async listener => {\n        listener(event);\n      });\n    }\n  }\n  function once(name: EVENTNAME, callback: EVENTLISTENER) {\n    assertEVENTNAME(name);\n    assertEVENTLISTENER(callback);\n    let fired = false;\n    let wrapped = 源回调到一次包装.get(callback);\n    if (!wrapped) {\n      const 一次包装 = (event?: any) => {\n        off(name, 一次包装);\n        if (!fired) {\n          fired = true;\n          callback(event);\n        }\n      };\n      wrapped = 一次包装;\n      源回调到一次包装.set(callback, wrapped);\n    }\n\n    on(name, wrapped);\n  }\n  function on(name: EVENTNAME, callback: EVENTLISTENER) {\n    assertEVENTNAME(name);\n    assertEVENTLISTENER(callback);\n    const 监听器集合 = 获取监听器集合(name);\n    监听器集合.add(callback);\n  }\n  function off(name: EVENTNAME, callback: EVENTLISTENER) {\n    assertEVENTNAME(name);\n    assertEVENTLISTENER(callback);\n\n    const 监听器集合 = 获取监听器集合(name);\n    监听器集合.delete(callback);\n  }\n\n  function eventNames(): EVENTNAME[] {\n    return [...监听器回调映射.keys()];\n  }\n  function listeners(name: EVENTNAME): EVENTLISTENER[] {\n    assertEVENTNAME(name);\n    if (监听器回调映射.has(name)) {\n      const 监听器集合 = 获取监听器集合(name);\n      return [...监听器集合];\n    } else {\n      return [];\n    }\n  }\n  function listenerCount(name: EVENTNAME): number {\n    assertEVENTNAME(name);\n    if (监听器回调映射.has(name)) {\n      const 监听器集合 = 获取监听器集合(name);\n      return 监听器集合.size;\n    } else {\n      return 0;\n    }\n  }\n  const eventtarget = {\n    [Symbol.toStringTag]: \"EventEmitterTarget\",\n    listenerCount,\n    clear,\n    removeAllListeners: clear,\n    on,\n    addListener: on,\n    off,\n    removeListener: off,\n    once,\n    emit,\n    dispatch: emit,\n    eventNames,\n    listeners\n  };\n  return eventtarget;\n}\nfunction assertEVENTNAME(name: any): asserts name is EVENTNAME {\n  if (\"string\" !== typeof name && \"symbol\" !== typeof name) {\n    throw new TypeError(\n      \" EVENTNAME expected: string | symbol;but invalid :\" + name\n    );\n  }\n}\n\nfunction assertEVENTLISTENER(callback: any): asserts callback is EVENTLISTENER {\n  if (\"function\" !== typeof callback) {\n    throw new TypeError(\n      \" EVENTLISTENER expected: (event?: any) => void;but invalid:\" + callback\n    );\n  }\n}\n"],"names":["assertEVENTNAME","name","TypeError","assertEVENTLISTENER","callback","createorclass","eventemittertarget","监听器回调映射","Map","源回调到一次包装","WeakMap","获取监听器集合","监听器集合","get","Set","set","clear","has","emit","event","forEach","async","listener","on","add","off","delete","[object Object]","Symbol","toStringTag","listenerCount","size","removeAllListeners","addListener","removeListener","once","fired","wrapped","一次包装","dispatch","eventNames","keys","listeners","createeventtarget","this","Object","assign"],"mappings":"AAkHA,SAASA,EAAgBC,GACvB,GAAI,iBAAoBA,GAAQ,iBAAoBA,EAClD,MAAM,IAAIC,UACR,qDAAuDD,GAK7D,SAASE,EAAoBC,GAC3B,GAAI,mBAAsBA,EACxB,MAAM,IAAIF,UACR,8DAAgEE,2BA5H9CC,IAGtB,MAAMC,EAWR,WACE,MAAMC,EAAU,IAAIC,IACdC,EAAW,IAAIC,QACrB,SAASC,EAAQV,GACf,IAAIW,EAAwCL,EAAQM,IAAIZ,GAKxD,OAJKW,IACHA,EAAQ,IAAIE,IACZP,EAAQQ,IAAId,EAAMW,IAEbA,EAGT,SAASI,EAAMf,GAEb,GADAD,EAAgBC,GACZM,EAAQU,IAAIhB,GAAO,CACPU,EAAQV,GAChBe,SAGV,SAASE,EAAKjB,EAAiBkB,GAE7B,GADAnB,EAAgBC,GACZM,EAAQU,IAAIhB,GAAO,CACPU,EAAQV,GAChBmB,QAAQC,MAAMC,IAClBA,EAASH,MAuBf,SAASI,EAAGtB,EAAiBG,GAC3BJ,EAAgBC,GAChBE,EAAoBC,GACNO,EAAQV,GAChBuB,IAAIpB,GAEZ,SAASqB,EAAIxB,EAAiBG,GAC5BJ,EAAgBC,GAChBE,EAAoBC,GAENO,EAAQV,GAChByB,OAAOtB,GAuCf,MAfoB,CAClBuB,CAACC,OAAOC,aAAc,qBACtBC,cAXF,SAAuB7B,GAErB,GADAD,EAAgBC,GACZM,EAAQU,IAAIhB,GAAO,CAErB,OADcU,EAAQV,GACT8B,KAEb,OAAO,GAMTf,MAAAA,EACAgB,mBAAoBhB,EACpBO,GAAAA,EACAU,YAAaV,EACbE,IAAAA,EACAS,eAAgBT,EAChBU,KA/DF,SAAclC,EAAiBG,GAC7BJ,EAAgBC,GAChBE,EAAoBC,GACpB,IAAIgC,GAAQ,EACRC,EAAU5B,EAASI,IAAIT,GAC3B,IAAKiC,EAAS,CACZ,MAAMC,EAAQnB,IACZM,EAAIxB,EAAMqC,GACLF,IACHA,GAAQ,EACRhC,EAASe,KAGbkB,EAAUC,EACV7B,EAASM,IAAIX,EAAUiC,GAGzBd,EAAGtB,EAAMoC,IA+CTnB,KAAAA,EACAqB,SAAUrB,EACVsB,WAjCF,WACE,MAAO,IAAIjC,EAAQkC,SAiCnBC,UA/BF,SAAmBzC,GAEjB,GADAD,EAAgBC,GACZM,EAAQU,IAAIhB,GAAO,CAErB,MAAO,IADOU,EAAQV,IAGtB,MAAO,KAjFgB0C,GAC3B,OAAIC,MAAMA,gBAAgBvC,GACxBwC,OAAOC,OAAOF,KAAMtC,GACbsC,MAEAtC"}