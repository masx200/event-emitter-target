{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["export type EventEmitterTarget = ReturnType<typeof createEventEmitterTarget>;\nexport interface EventEmitterTargetConstructor {\n  new (): EventEmitterTarget;\n  (this: EventEmitterTarget | undefined): EventEmitterTarget;\n}\nconst EventEmitterTargetClass: EventEmitterTargetConstructor = function EventEmitterTargetClass(\n  this: EventEmitterTarget | undefined\n): EventEmitterTarget {\n  const eventemittertarget = createEventEmitterTarget();\n  if (this && this instanceof EventEmitterTargetClass) {\n    Object.assign(this, eventemittertarget);\n    return this as EventEmitterTarget;\n  } else {\n    return Reflect.construct(EventEmitterTargetClass, []) as EventEmitterTarget;\n  }\n} as EventEmitterTargetConstructor;\nexport type EVENTNAME = string | symbol;\nexport type EVENTLISTENER = (event?: any) => void;\nexport default EventEmitterTargetClass;\n\nfunction createEventEmitterTarget() {\n  const 监听器回调映射 = new Map<EVENTNAME, Set<EVENTLISTENER>>();\n  const 源回调到一次包装 = new WeakMap<EVENTLISTENER, EVENTLISTENER>();\n  function 获取监听器集合(name: EVENTNAME): Set<EVENTLISTENER> {\n    let 监听器集合: Set<EVENTLISTENER> | undefined = 监听器回调映射.get(name);\n    if (!监听器集合) {\n      监听器集合 = new Set();\n      监听器回调映射.set(name, 监听器集合);\n    }\n    return 监听器集合;\n  }\n\n  function clear(name: EVENTNAME) {\n    assertEVENTNAME(name);\n    if (监听器回调映射.has(name)) {\n      const 监听器集合 = 获取监听器集合(name);\n      监听器集合.clear();\n    }\n  }\n  function emit(name: EVENTNAME, event?: any) {\n    assertEVENTNAME(name);\n    if (监听器回调映射.has(name)) {\n      const 监听器集合 = 获取监听器集合(name);\n      监听器集合.forEach(listener => {\n        Promise.resolve().then(() => {\n          listener(event);\n        });\n      });\n    }\n  }\n  function once(name: EVENTNAME, callback: EVENTLISTENER) {\n    assertEVENTNAME(name);\n    assertEVENTLISTENER(callback);\n    let fired = false;\n    let wrapped = 源回调到一次包装.get(callback);\n    if (!wrapped) {\n      const 一次包装 = (event?: any) => {\n        off(name, 一次包装);\n        off(name, callback);\n        if (!fired) {\n          fired = true;\n          callback(event);\n        }\n      };\n      wrapped = 一次包装;\n      源回调到一次包装.set(callback, wrapped);\n    }\n\n    on(name, wrapped);\n\n    off(name, callback);\n  }\n  function on(name: EVENTNAME, callback: EVENTLISTENER) {\n    assertEVENTNAME(name);\n    assertEVENTLISTENER(callback);\n    const 监听器集合 = 获取监听器集合(name);\n    监听器集合.add(callback);\n  }\n  function off(name: EVENTNAME, callback: EVENTLISTENER) {\n    assertEVENTNAME(name);\n    assertEVENTLISTENER(callback);\n\n    const 监听器集合 = 获取监听器集合(name);\n    监听器集合.delete(callback);\n    let 一次包装 = 源回调到一次包装.get(callback);\n    if (一次包装) {\n      监听器集合.delete(一次包装);\n    }\n  }\n\n  function eventNames(): EVENTNAME[] {\n    return [...监听器回调映射.keys()];\n  }\n  function listeners(name: EVENTNAME): EVENTLISTENER[] {\n    assertEVENTNAME(name);\n    if (监听器回调映射.has(name)) {\n      const 监听器集合 = 获取监听器集合(name);\n      return [...监听器集合];\n    } else {\n      return [];\n    }\n  }\n  function listenerCount(name: EVENTNAME): number {\n    assertEVENTNAME(name);\n    if (监听器回调映射.has(name)) {\n      const 监听器集合 = 获取监听器集合(name);\n      return 监听器集合.size;\n    } else {\n      return 0;\n    }\n  }\n\n  function iterator(): [EVENTNAME, EVENTLISTENER[]][] {\n    return [...监听器回调映射].map(([key, value]) => {\n      return [key, [...value]];\n    });\n  }\n  const eventtarget = {\n    [Symbol.toPrimitive]: toprimitive,\n\n    [Symbol.toStringTag]: toStringTag,\n    [Symbol.iterator]: iterator,\n    listenerCount,\n    clear,\n    removeAllListeners: clear,\n    on,\n    addListener: on,\n    off,\n    removeListener: off,\n    once,\n    emit,\n    dispatch: emit,\n    eventNames,\n    listeners\n  };\n  return eventtarget;\n}\nfunction assertEVENTNAME(name: any): asserts name is EVENTNAME {\n  if (\"string\" !== typeof name && \"symbol\" !== typeof name) {\n    throw new TypeError(\n      \" EVENTNAME expected: string | symbol;but invalid :\" + name\n    );\n  }\n}\n\nfunction assertEVENTLISTENER(callback: any): asserts callback is EVENTLISTENER {\n  if (\"function\" !== typeof callback) {\n    throw new TypeError(\n      \" EVENTLISTENER expected: (event?: any) => void;but invalid:\" + callback\n    );\n  }\n}\nconst toStringTag = \"EventEmitterTarget\";\nfunction toprimitive(): string {\n  return {}.toString.call({ [Symbol.toStringTag]: toStringTag });\n}\n"],"names":["assertEVENTNAME","name","TypeError","assertEVENTLISTENER","callback","toStringTag","toprimitive","toString","call","[object Object]","Symbol","EventEmitterTargetClass","eventemittertarget","监听器回调映射","Map","源回调到一次包装","WeakMap","获取监听器集合","监听器集合","get","Set","set","clear","has","emit","event","forEach","listener","Promise","resolve","then","on","add","off","delete","一次包装","toPrimitive","iterator","map","key","value","listenerCount","size","removeAllListeners","addListener","removeListener","once","fired","wrapped","dispatch","eventNames","keys","listeners","createEventEmitterTarget","this","Object","assign","Reflect","construct"],"mappings":"AAyIA,SAASA,EAAgBC,GACvB,GAAI,iBAAoBA,GAAQ,iBAAoBA,EAClD,MAAM,IAAIC,UACR,qDAAuDD,GAK7D,SAASE,EAAoBC,GAC3B,GAAI,mBAAsBA,EACxB,MAAM,IAAIF,UACR,8DAAgEE,GAItE,MAAMC,EAAc,qBACpB,SAASC,IACP,MAAO,GAAGC,SAASC,KAAK,CAAEC,CAACC,OAAOL,aAAcA,mBArJa,SAASM,IAGtE,MAAMC,EAYR,WACE,MAAMC,EAAU,IAAIC,IACdC,EAAW,IAAIC,QACrB,SAASC,EAAQhB,GACf,IAAIiB,EAAwCL,EAAQM,IAAIlB,GAKxD,OAJKiB,IACHA,EAAQ,IAAIE,IACZP,EAAQQ,IAAIpB,EAAMiB,IAEbA,EAGT,SAASI,EAAMrB,GAEb,GADAD,EAAgBC,GACZY,EAAQU,IAAItB,GAAO,CACPgB,EAAQhB,GAChBqB,SAGV,SAASE,EAAKvB,EAAiBwB,GAE7B,GADAzB,EAAgBC,GACZY,EAAQU,IAAItB,GAAO,CACPgB,EAAQhB,GAChByB,QAAQC,IACZC,QAAQC,UAAUC,KAAK,KACrBH,EAASF,QA2BjB,SAASM,EAAG9B,EAAiBG,GAC3BJ,EAAgBC,GAChBE,EAAoBC,GACNa,EAAQhB,GAChB+B,IAAI5B,GAEZ,SAAS6B,EAAIhC,EAAiBG,GAC5BJ,EAAgBC,GAChBE,EAAoBC,GAEpB,MAAMc,EAAQD,EAAQhB,GACtBiB,EAAMgB,OAAO9B,GACb,IAAI+B,EAAOpB,EAASI,IAAIf,GACpB+B,GACFjB,EAAMgB,OAAOC,GAiDjB,MAlBoB,CAClB1B,CAACC,OAAO0B,aAAc9B,EAEtBG,CAACC,OAAOL,aAAcA,EACtBI,CAACC,OAAO2B,UATV,WACE,MAAO,IAAIxB,GAASyB,IAAI,EAAEC,EAAKC,KACtB,CAACD,EAAK,IAAIC,MAQnBC,cApBF,SAAuBxC,GAErB,GADAD,EAAgBC,GACZY,EAAQU,IAAItB,GAAO,CAErB,OADcgB,EAAQhB,GACTyC,KAEb,OAAO,GAeTpB,MAAAA,EACAqB,mBAAoBrB,EACpBS,GAAAA,EACAa,YAAab,EACbE,IAAAA,EACAY,eAAgBZ,EAChBa,KA/EF,SAAc7C,EAAiBG,GAC7BJ,EAAgBC,GAChBE,EAAoBC,GACpB,IAAI2C,GAAQ,EACRC,EAAUjC,EAASI,IAAIf,GAC3B,IAAK4C,EAAS,CACZ,MAAMb,EAAQV,IACZQ,EAAIhC,EAAMkC,GACVF,EAAIhC,EAAMG,GACL2C,IACHA,GAAQ,EACR3C,EAASqB,KAGbuB,EAAUb,EACVpB,EAASM,IAAIjB,EAAU4C,GAGzBjB,EAAG9B,EAAM+C,GAETf,EAAIhC,EAAMG,IA4DVoB,KAAAA,EACAyB,SAAUzB,EACV0B,WA1CF,WACE,MAAO,IAAIrC,EAAQsC,SA0CnBC,UAxCF,SAAmBnD,GAEjB,GADAD,EAAgBC,GACZY,EAAQU,IAAItB,GAAO,CAErB,MAAO,IADOgB,EAAQhB,IAGtB,MAAO,KA3FgBoD,GAC3B,OAAIC,MAAQA,gBAAgB3C,GAC1B4C,OAAOC,OAAOF,KAAM1C,GACb0C,MAEAG,QAAQC,UAAU/C,EAAyB"}