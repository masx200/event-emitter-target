function t() {
    return {}.toString.call({
        [Symbol.toStringTag]: "EventEmitterTarget"
    });
}

function e(t) {
    if ("string" != typeof t && "symbol" != typeof t) throw new TypeError(" EVENTNAME expected: string | symbol;but invalid :" + t);
}

function n(t) {
    if ("function" != typeof t) throw new TypeError(" EVENTLISTENER expected: (event?: any) => void;but invalid:" + t);
}

function r() {
    const r = new Map, i = new WeakMap;
    function o(t) {
        let e = r.get(t);
        return e || (e = new Set, r.set(t, e)), e;
    }
    function c(t) {
        if (e(t), r.has(t)) {
            o(t).clear();
        }
    }
    function s(t, n) {
        if (e(t), r.has(t)) {
            o(t).forEach((t => {
                Promise.resolve().then((() => {
                    t(n);
                }));
            }));
        }
    }
    function u(t, r) {
        e(t), n(r);
        o(t).add(r);
    }
    function f(t, e) {
        o(t).delete(e);
    }
    function a(t, r) {
        e(t), n(r), f(t, r), function(t, e) {
            const n = o(t);
            let r = i.get(e);
            r && n.delete(r);
        }(t, r);
    }
    function l() {
        return [ ...r ].map((([t, e]) => [ t, [ ...e ] ]))[Symbol.iterator]();
    }
    return {
        [Symbol.toPrimitive]: t,
        [Symbol.toStringTag]: "EventEmitterTarget",
        [Symbol.iterator]: l,
        entries: l,
        listenerCount: function(t) {
            if (e(t), r.has(t)) {
                return o(t).size;
            }
            return 0;
        },
        clear: c,
        removeAllListeners: c,
        on: u,
        addListener: u,
        off: a,
        removeListener: a,
        once: function(t, r) {
            e(t), n(r);
            let o = !1, c = i.get(r);
            if (!c) {
                const e = n => {
                    f(t, e), f(t, r), o || (o = !0, r(n));
                };
                c = e, i.set(r, c);
            }
            f(t, r), u(t, c);
        },
        emit: s,
        dispatch: s,
        eventNames: function() {
            return [ ...r.keys() ];
        },
        listeners: function(t) {
            if (e(t), r.has(t)) {
                return [ ...o(t) ];
            }
            return [];
        }
    };
}

const i = (t => {
    var e = Symbol(), n = new Function("return async()=>{}")()();
    function i() {
        const t = r();
        return this && this instanceof i ? (Object.assign(this, t), this) : Reflect.construct(i, []);
    }
    return Reflect.set(i, e, n), i;
})();

export default i;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
